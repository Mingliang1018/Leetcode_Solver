public class Solution {
    public boolean getExist(char [][]board, String word, int r, int c, int start, boolean [][]flag)
    {
        int m=board.length;
        int n=board[0].length;
        if(start==word.length())
            return true;
        int []R1={1,0,-1,0};
        int []C1={0,1,0,-1};
        for(int i=0; i<4; i++)
        {
            int r1=r+R1[i];
            int c1=c+C1[i];
            if(r1>=0&&r1<m&&c1>=0&&c1<n&&flag[r1][c1]==false&&board[r1][c1]==word.charAt(start))
            {
                flag[r1][c1]=true;
                if(getExist(board, word, r1, c1, start+1, flag))
                    return true;
                flag[r1][c1]=false;
            }
        }
        return false;
    }
    public boolean exist(char[][] board, String word) {
        if(board.length==0||board[0].length==0||word==null)
            return false;
        if(word.length()==0)
            return true;
        int m=board.length;
        int n=board[0].length;
        boolean [][]flag=new boolean[m][n];
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(board[i][j]==word.charAt(0))
                {
                    flag[i][j]=true;
                    if(getExist(board, word, i, j, 1, flag))
                        return true;
                    flag[i][j]=false;
                }
            }
        }
        return false;
    }
}