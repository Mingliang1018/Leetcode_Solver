import java.util.*;
public class Solution {
    public void getOrder(int [][]matrix, int start1, int end1, int start2, int end2, List<Integer> list)
    {
        if(start1>start2||end1>end2)
            return;
        if(start1==start2)
        {
            for(int j=end1; j<=end2; j++)
            {
                list.add(matrix[start1][j]);
            }
            return;
        }
        if(end1==end2)
        {
            for(int i=start1; i<=start2; i++)
            {
                list.add(matrix[i][end1]);
            }
            return;
        }
        for(int j=end1; j<=end2; j++)
        {
            list.add(matrix[start1][j]);
        }
        for(int i=start1+1; i<=start2; i++)
        {
            list.add(matrix[i][end2]);
        }
        for(int j=end2-1; j>=end1; j--)
        {
            list.add(matrix[start2][j]);
        }
        for(int i=start2-1; i>start1; i--)
        {
            list.add(matrix[i][end1]);
        }
        getOrder(matrix, start1+1, end1+1, start2-1, end2-1, list);
    }
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list=new ArrayList();
        int m=matrix.length;
        if(m==0)
            return list;
        int n=matrix[0].length;
        if(n==0)
            return list;
        getOrder(matrix, 0, 0, m-1, n-1, list);
        return list;
    }
}