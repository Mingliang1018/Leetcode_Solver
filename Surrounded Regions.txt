import java.util.*;
public class Solution {
    class Node{
        int row;
        int col;
        public Node(int row, int col)
        {
            this.row = row;
            this.col = col;
        }
    }
    public void getSolve(char [][]board, int s, int e)
    {
        Stack<Node> sta = new Stack();
        Node node =new Node(s, e);
        sta.push(node);
        int []R = {1,0,-1,0};
        int []C = {0,1,0,-1};
        
        while(!sta.isEmpty())
        {
            Node tmp = sta.pop();
            board[tmp.row][tmp.col] = 'Z';
            for(int i=0; i<4; i++)
            {
                int r=tmp.row+R[i];
                int c=tmp.col+C[i];
                if(r>=0&&r<board.length&&c>=0&&c<board[0].length&&board[r][c]=='O')
                {
                    Node newNode = new Node(r, c);
                    sta.push(newNode);
                }
                
            }
            
        }
    }
    public void solve(char[][] board) {
        int m=board.length;
        if(m<1)
            return;
        int n=board[0].length;
        if(n<1)
            return;
        
        for(int j=0; j<n; j++)
        {
            if(board[0][j]=='O')
            {
                getSolve(board, 0, j);
            }
            if(board[m-1][j]=='O')
                getSolve(board, m-1, j);
        }
        
        for(int i=0; i<m; i++)
        {
            if(board[i][0]=='O')
                getSolve(board, i, 0);
            if(board[i][n-1]=='O')
                getSolve(board, i, n-1);
        }
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(board[i][j]=='O')
                {
                    board[i][j]='X';
                }
                else if(board[i][j]=='Z')
                    board[i][j]='O';
            }
        }
        
    }
}