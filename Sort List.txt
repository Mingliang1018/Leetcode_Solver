/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    ListNode node;
    public ListNode merge(ListNode node1, ListNode node2)
    {
        if(node1==null)
            return node2;
        if(node2==null)
            return node1;
        ListNode newHead = new ListNode(0);
        ListNode last = newHead;
        while(node1!=null&&node2!=null)
        {
            if(node1.val<=node2.val)
            {
                last.next=node1;
                last = node1;
                node1 = node1.next;
            }
            else
            {
                last.next = node2;
                last = node2;
                node2 = node2.next;
            }
        }
        if(node1==null)
            last.next = node2;
        else
            last.next = node1;
        return newHead.next;
    }
    public ListNode sort(int count)
    {
        if(count==1)
        {
            ListNode res = node;
            ListNode next = node.next;
            node.next = null;
            node = next;
            return res;
        }
        else
        {
            ListNode node1 = sort(count/2);
            ListNode node2 = sort(count - count/2);
            return merge(node1, node2);
        }
    }
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null)
            return head;
        ListNode p=head;
        int count=0;
        while(p!=null)
        {
            count++;
            p=p.next;
        }
        node = head;
        return sort(count);
    }
}