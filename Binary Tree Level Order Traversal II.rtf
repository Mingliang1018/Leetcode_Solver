{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
import java.util.*;\
public class Solution \{\
    public List<List<Integer>> levelOrderBottom(TreeNode root) \{\
        Queue<TreeNode> que1=new LinkedList();\
        Queue<Integer> que2=new LinkedList();\
        List<List<Integer>> list=new ArrayList();\
        if(root==null)\
            return list;\
        que1.offer(root);\
        que2.offer(1);\
        int pre=1;\
        List<Integer> li=new ArrayList();\
        \
        while(!que1.isEmpty())\
        \{\
            TreeNode tmp=que1.poll();\
            int level=que2.poll();\
            if(level==pre)\
            \{\
                li.add(tmp.val);\
            \}\
            else\
            \{\
                list.add(0,  li);\
                li=new ArrayList();\
                li.add(tmp.val);\
                pre=level;\
            \}\
            if(tmp.left!=null)\
            \{\
                que1.offer(tmp.left);\
                que2.offer(level+1);\
            \}\
            if(tmp.right!=null)\
            \{\
                que1.offer(tmp.right);\
                que2.offer(level+1);\
            \}\
        \}\
        list.add(0, li);\
        return list;\
    \}\
\}}